#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *link;
    
};
struct node* add_empty(int data){
    struct node*temp=malloc(sizeof(struct node));
    
    temp->data=data;
  temp->link=temp;
  return temp;
}
struct node*add_beg(struct node *head,int data){
    struct node*temp=malloc(sizeof(struct node));
    temp->data=data;
    if (head == NULL) {
        temp->link = temp;
        return temp;
    }
   
    struct node*t;
    t=head;
    while(t->link!=head){
        t=t->link;
    }
    
    t->link=temp;
    temp->link=head;
    
    return temp;
    
}
void print(struct node*head){
    struct node*temp=head;
    printf("the circular single linked list\n");
    if(temp!= NULL){
    printf("%d ",temp->data);
    temp=temp->link;
    while(temp!=head){
        printf("-> %d ",temp->data);
        temp=temp->link;
    }
    }
}
struct node*add_end(struct node *head,int data){
    struct node*temp=malloc(sizeof(struct node));
    temp->data=data;
    temp->link=NULL;
    if(head==NULL){
        temp->link=temp;
        return temp;
    }
    struct node *t=head;
    while(t->link!=head){
        t=t->link;
    }
   t->link=temp;
   temp->link=head;
    return head;
}
struct node * add_poss(struct node *head,int data,int poss){
    struct node *temp=malloc(sizeof(struct node));
    temp->data=data;
    temp->link=NULL;
    if(poss==1){
        head=add_beg(head,data);
        return head;
    }
    struct node *t=head;
    
    while(poss>2 && t->link != head){
        t=t->link;
        poss--;
    }
    if(t->link==head){
        head=add_end(head,data);
        return head;
    }
    
       temp->link= t->link;
        t->link=temp;
        
    
    return head;
}
struct node*del_beg(struct node *head){
    struct node *temp=head;
    if (head == NULL) {
        printf("List is empty, nothing to delete.\n");
        return NULL;
    }
    else if (head->link == head) {
        printf("The deleted data is %d\n", temp->data);
        free(temp);
        return NULL;
    }
    else {
    head=head->link;
    struct node*t=head;
    while(t->link!=temp){
        t=t->link;
    }
    t->link=head;
    printf("the deleted data is %d",temp->data);
    free(temp);
   
    return head;
    }
}
struct node *del_end(struct node *head){
    struct node *temp=head;
     struct node *prev=NULL;
    if (head == NULL) {
        printf("List is empty, nothing to delete.\n");
        return NULL;
    }
    else if (head->link == head) {
        printf("The deleted data is %d\n", temp->data);
        free(temp);
        return NULL;
    }
    else {
        struct node*t=head;
        while(t->link!=temp){
           prev=t;
            t=t->link;
        }
        prev->link=head;
        printf("the end deleted data is %d",t->data);
        free(t);
        
    }
    return head;
}
struct node *del_poss(struct node *head,int poss){
    struct node *temp=head;
    if (head == NULL) {
        printf("List is empty, nothing to delete.\n");
        return NULL;
    }
    if(poss==1){
        head=del_beg(head);
        return head;
    }
    struct node *t=head;
    struct node*prev=NULL;
    while(poss>2 && t->link!=temp){
        t=t->link;
        poss--;
    }
       if (poss > 2 || t->link == head) {
        printf("Invalid position! Position out of range.\n");
        return head;
    }
    prev=t->link;
    t->link = prev->link;  
    printf("The deleted data is %d\n", prev->data);
    free(prev);

    return head;
    
}
void count(struct node*head){
    struct node *temp=head;
    if (head == NULL) {
        printf("The count is 0\n");
        return;
    }
    int count=1;
    while(temp->link!=head){
        temp=temp->link;
        count++;
    }
    printf("the count is %d \n",count);
}
struct node*search(struct node *head,int d){
    struct node*temp=head;
    if(head==NULL){
        printf("the ll is empty");
        return NULL;
    }
    int found = 0;  
    while (temp->link != head) {  
        if (temp->data == d) {  
            printf("Yes, %d is there!\n", temp->data);
            found = 1;
            break;
        }
        temp = temp->link;
    }
    
    if (temp->data == d) {
        printf("Yes, %d is there!\n", temp->data);
        found = 1;
    }

    if (!found) {
        printf("Nope, %d is not in the list.\n", d);
    }
    return head;
}
int main(){
    struct node*head;
    head=add_empty(400);
    head=add_beg(head,300);
    head=add_beg(head,100);
    print(head);
    head=add_end(head,500);
    print(head);
    head=add_poss(head,200,2);
     print(head);
    head=del_beg(head);
     print(head);
     head=del_end(head);
      print(head);
      head=del_poss(head,2);
      print(head);
      count(head);
      head=search(head,500);
      
    
    
    
    return 0;
}
