#include <stdio.h>
#include<stdlib.h>
struct node{
    struct node*left;
    struct node*right;
    int data;
    int height;
};
int getheight(struct node *root){
    if(root==NULL)
    return 0;
    return root->height;
}
struct node*newnode(int data){
    struct node * n=malloc(sizeof(struct node));
    n->data=data;
    n->right=NULL;
    n->left=NULL;
    n->height=1;
    return n;
}
int max(int a,int b){
    return(a>b)?a:b;
}
int getbalancefactor(struct node *root){
    if(root==NULL)
    return 0;
    return getheight(root->left)-getheight(root->right);
}
struct node*rightrotation(struct node*y){
    struct node *x=y->left;
    struct node*t2=x->right;
    x->right=y;
    y->left=t2;
y->height=max(getheight(y->left),getheight(y->right))+1;
x->height=max(getheight(x->left),getheight(x->right))+1;
return x;
}
struct node*leftrotation(struct node*y){
    struct node*x=y->right;
    struct node*t2=x->left;
    x->left=y;
    y->right=t2;
x->height=max(getheight(x->left),getheight(x->right))+1;
y->height=max(getheight(y->left),getheight(y->right))+1;
return x;
}
struct node *insert(struct node*root,int key){ 
  if(root==NULL)
  return newnode(key);
 if(key<root->data)
 root->left=insert(root->left,key);
 else if(key>root->data)
 root->right=insert(root->right,key);
 else 
 return root;
 root->height=1+max(getheight(root->left),getheight(root->right));
 int balance=getbalancefactor(root);
 if(balance>1&&key<root->left->data){
     return rightrotation(root);
 }
 else if(balance<-1&&key>root->right->data){
    return  leftrotation(root);
 }
 else if(balance>1&&key>root->left->data){
   root->left=  leftrotation(root->left);
    return  rightrotation(root);
 }
 else if(balance<-1&&key<root->right->data){
     root->right=  rightrotation(root->right);
     return    leftrotation(root);
 }

     return root;
 
}
void inorder(struct node*root){
    if (root != NULL) {
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
    }
    
}
int main() {
    struct node* root = NULL;

    // Inserting nodes
    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);
    root = insert(root, 3);

    // Print preorder traversal of the AVL tree
    printf("Inorder traversal of AVL tree: ");
    inorder(root);

    return 0;
}
